Creaciond de repositorio.

    Para crear un repositorio nuevo se hace mediante git init

Git reset

    para volver en el tiempo a una version anterior se puede hacer mediante reset
    Existen dos versiones de reset, una suave y una dura. 
    En la primera se usa git reset 016f19cc8eef003752f1f11de86e1907daf228c6 --soft
    la anterior linea de codigo trae nuevamente los datos de la version anterior del 
    repositorio pero sin modificar el staging.

    La version hard se usa de la siguiente manera.
    git reset 016f19cc8eef003752f1f11de86e1907daf228c6 --hard.
    esa linea de codigo lo que hace es traer la version anterior del repsitorio pero
    modificando todo.

ver una version anterior
    
    Para ver una version anterior o un commit anterior puedo usar chekout de la siguiente manera
    git chekout IDENTIFICADOR_DEL_COMMIT ARCHIVO_QUE_QUIERO_TRAER
    git chekout 016f19cc8eef003752f1f11de86e1907daf228c6 historia.txt

    Si se quiere obtener la version del master o la actual se debe cambiar el identidicador del commit
    por master git chekout master historia.txt

Crear una nueva rama
    se puede crear una rama para agregar cambios sin afectar el commit actual, esto se hace asi:
    git branch NOMBRE_RAMA por ejemplor git branch cabecera. Esto creara una nueva rama la cual se
    llamara cabecera.

Moverse a la nueva rama
    Una vez creada la nueva rama necesito moverme a esta desde la rama master para empezar a 
    modificarla. Esto se realiza asi: git checkout NOMBRE_RAMA ejemplo git checkout cabecera.
    De esta manera nos movemos de la rama master a la rama cabecera.

Fusionar dos ramas
    En algunas ocaciones se debe fusionar dos ramas para tener los cambios que re han realizado en estas en 
    nuestra rama principal, para esto se realiza un merge asi:
    git merge NOMBRE_RAMA por ejemplo git merge cabecera, luego de fusionar las ramas se debe hacer push 

Crear una llave SSH
    Una llave SSH es aquella que nos permite conectarnos a un repositorio de git hub de manera segura creando una 
    llave publica y una privada. Para crear una llave SSH se debe escribir el comando ssh-keygen -t rsa -b 4096 -C "youremail@example.com"
    posteriormente se debe presionar enter para aceptar la ubicacion donde se va a crear la llave y agregar una passfrase 
    y listo ya tenemos nuestra llave SSH

Editar passphrase de una llave SSH
    Si por algun motivo se desea cambiar una passphrase de una llave SSH se puede hacer mediante
    ssh-keygen -p -f RUTA_LLAVE ejemplo ssh-keygen -p -f ~/.ssh/id_ed25519

Comprobrar una llave SSH
    Para comprobar que se ha agregado una llave ssh correctamente se puede usar el comando eval $(ssh-agent -s) el cual mostrara
    si se esta ejecutando el proceso y con que codigo lo esta haciendo.   

Agregar una llave SSH localmente
    No es sufuciente con crear la llave SSH se debe tambien agregarla a nuestro repositorio, para esto se usa el codigo 
    ssh-add ~/.ssh/id_rsa

Agregar una llave SSH a git hub
    Este es un paso muy simple y solo vasta con entrar a nuestra cuenta de git hub y en el apartado ssh de la configuracion
    creamos una nueva llave ssh y pegamos nuestra llave ssh publica

Crear o Clonar un repositorio con ssh
    Si queremos tener un repositorio remoto primero debemos crearlo en github, posteriormente copiamos la url ssh y usando el
    comando git remote add origin URL-SSH-REPOSITORIO ya hemos creado el repositorio remoto, ahora solo falta realizar el git push origin main 
    no sin antes haber hecho git pull origin main.
    Tambien se puede clonar el repsitorio mediante git clone URL_O_SSH_REPOSITORIO

creacion de tags
    los tags son etiquetas que nos sirven para identificar nuestro proyecto ya sean versiones o demas. Para crear un tag se hace
    con el comando git tag -a NOMBRE-TAG -m "MENSAJE DEL COMMIT" HASH-TAG por ejemplo:
    git tag -a v0.1 -m "Primera versiond de mi blog" a16b7a6.
    Luego se puede ver los tags asociados o creados con el comando git tag.
    para mirar hacia donde estan asociados los tags podemos usar el comando git show-ref --tags
    posterior a crear un tag se debe publicarlo con git push origin --tags
    Si por alguna razon queremos eliminar un tag se puede hacer con git tag -d  NOMBRE_TAG
    posteriormente publicarlo, pero esto no es todo
    para que no siga siendo visible en github se debe usar el comando:
    git push origin :refs/tags/NOMBRE_TAG

Pull Request
    Es una solictud la cual me permite revisar los cambios que se han hecho a otras ramas
    antes de fusionarlas con mi rama principal, esto se puede hacer desde la interfaz de github

Fork 
    Se clona el estado actual del repositorio. Se hace mediante el boton fork de github, luego se debe
    clonar el repsitorio. Para hacer merge entre las dos versiones se debe hacer un pull request

git rebase
    cuando tenemos una nueva rama y hacemos un merge no solo vamos a tener la rama antigua si no también la nueva rama 
    pero si queremos que se modifique la hisotria de la rama principal como si no hubiera pasado nada se puede hacer usando
    de git rebase, sin embargo, esto no es una buena práctica puesto que sobre escribe la hisotria de la rama principal.
    Por esta razón solo es recomendable hacerlo en repositorios locales más no en repositorios remotos.
    se debe hacer primero rebase a la rama que se desea modificar y luego a la rama que va a quedar

git stash
    este comando sirve para no publicar directamente los cambios hechos en el repositorio si no que los guarda para publicarlos después. 
    con git stash los cambios vuelven al punto anterior de donde estaba antes de hacerlos. sirve para experimentar y volver a donde
    estabamos 

git clean 
    este comando sirve para borrar archivos no deseados de nuiestro repositorio, por ejemplo cuando hay una copia de varios archivos
    que no deseamos y queremos eliminarlos, para ejecutarlo primero debemos ingresar el comando git clean --dry--run para comprobar
    los archivos que deseamos borrar y luego ingresar git clean -f y se borrará todo lo que hayamos establecido excepto las carpetas y
    los archivos de .gitignore

git cherry-pick 
    este comando se usa para traer un commit a la rama master, se puede usar si deseamos traer un cambio en especifico y no todos los cambios
    que hayamos hecho en la otra rama y se usa asi: git cherry-up HASH_COMMIT

git reflog y git reset
    git reflog funciona de igual forma que git log ya que nos muestra la historia de nuestro proyecto y todos, absolutamente todos los 
    commits que hemos hecho hallan sido de errores o no, podemos obseravar los commits de git reflog para ver un commit al que queramos
    volver si rompimos completamente nuestro proyecto. Para volver a un estado anterior se debe usar git reset --hard HASH_COMMIT pero
    los cambios que deseamos eliminar no van a desaparecer de git reflog.
    
git commit --amend
    este comando es util para remendar commits es decir para añadir a un commit anterior algo nuevo y de esta manera no tener que hacer un 
    nuevo commit

git grep 
    En muchas ocasiones se va a necesitar buscar algo dentro de nuestro repositorio, ya sea cuantas veces escribimos una palabra
    o donde esta esta palabra, esto es posible graciasa git grep. Si se desea buscar en que linea se escribio una palabra se puede 
    digitar git grep -n PALABRA y si se desea contar las veces que se escribio esa palabra se puede usar git grep -c PALABRA
    eso solo buscara en los archivos del repositorio. Si se desea buscar en los commits se debe usar git log -S "PALABRA"





